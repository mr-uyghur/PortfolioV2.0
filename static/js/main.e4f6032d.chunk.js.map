{"version":3,"sources":["components/card/card.component.jsx","components/cardlist/card-list.component.jsx","components/searchBox/searchBox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","handlechange","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filterMonsters","filter","toLowerCase","includes","toLocaleLowerCase","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAIaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAM,SAASC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BACzB,oCAAOL,EAAMI,QAAQE,KAArB,OACA,6BAAKN,EAAMI,QAAQG,YCHhBC,EAAW,SAACR,GACrB,OAII,aAHA,CAGA,OAAKC,UAAY,YAAjB,SAEAD,EAAMS,SAASC,KAAI,SAACN,GAAD,OACnB,cAAC,EAAD,CAAwBA,QAAWA,GAAvBA,EAAQC,UCXfM,G,MAAW,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,aACnC,OACI,uBAAOZ,UAAU,SAASa,KAAO,SAASF,YAAeA,EAAaG,SAAaF,MCsD5EG,E,kDAlDb,WAAYhB,GAAQ,IAAD,8BACjB,gBAoBFiB,aAAe,SAAAC,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAlBtC,EAAKC,MAAQ,CAGX,SAAY,GACZ,YAAc,IARC,E,sDAcnB,WAAsB,IAAD,OACnBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAUmB,S,oBAQ1C,WAAS,MAGyBC,KAAKN,MAA9Bd,EAHA,EAGAA,SAAUW,EAHV,EAGUA,YACXU,EAAiBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC5CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYc,wBAGlD,OAAQ,sBAAKjC,UAAU,MAAf,UACN,4CAEA,cAAC,EAAD,CACAW,YAAc,eACdC,aAAiBgB,KAAKZ,eAGtB,cAAC,EAAD,CAAUR,SAAYqB,W,GA5CVK,IAAMC,WCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e4f6032d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\n//functional component: this component is responsible for rendering data passed in from (cardlist component) props  individually \r\nexport const Card = (props) =>{\r\n    return(\r\n        <div className = \"card-container\">\r\n            <img alt = \"moster\" src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n          <h1>  {props.monster.name} </h1>\r\n          <h3>{props.monster.email}</h3>\r\n            </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './card-list.style.css';\r\nimport {Card} from '../card/card.component';\r\n\r\n//code below is the entire compoent and it will be exported\r\n//functional compoent\r\nexport const CardList = (props) => {\r\n    return(\r\n        /* the code below return the json data from props with the map method \r\n            and it passes in data to the Card component as individual data sets\r\n        */\r\n        <div className = \"card-list\">   \r\n        {\r\n        props.monsters.map((monster) => \r\n        <Card  key={monster.id} monster = {monster} \r\n        />) \r\n        }\r\n       \r\n        </div> \r\n\r\n    )\r\n}","import './searchBox.styles.css'\r\nimport React from 'react'\r\n\r\nexport const SearchBox= ({placeholder, handleChange}) =>{\r\n    return(\r\n        <input className=\"search\" type = 'search' placeholder = {placeholder} onChange = { handleChange }/>\r\n    )\r\n}","\nimport './App.css';\nimport React,{ Component } from 'react';\nimport {CardList} from './components/cardlist/card-list.component'\nimport {SearchBox} from './components/searchBox/searchBox.component'\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super()\n\n    //use an array of objects to hold key and valye paid for data\n    this.state = {\n      //array of monsters with their names\n      //add id for unique key, each id value must be unique\n      'monsters': [],\n      'searchField':''\n    }\n  }\n\n  //this block of code fetch's data from an API endpoint\n  //and sets the state with the json data\n  componentWillMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    //users var gets the json data from response.json\n    .then(users => this.setState({monsters: users}))\n  }\n\n  handlechange = e => { \n    this.setState({ searchField: e.target.value} );\n  };\n\n\n  render() {\n\n    //code below is a filter used for the search field.\n    const {monsters, searchField} = this.state\n    const filterMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n      )\n\n    return (<div className=\"App\">\n      <h1> Monsters </h1>\n      {/* <input type = 'search' placeholder = 'search field' onChange = { e  => this.setState({'searchField':e.target.value})  }/> */}\n      <SearchBox\n      placeholder = 'search field'\n      handleChange = { this.handlechange}\n      />\n      {/*component below is passing the mosters json data with props */}\n      <CardList monsters = {filterMonsters}/>\n  \n    </div>)\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}